[versions]
classgraph = "4.8.172"
composeDesktop = "1.6.10-dev1632"
detekt = "1.23.6"
dokka = "1.9.20"
ideaGradlePlugin = "1.1.8"
intellij = "241.14494.241"
fastutil = "8.5.13"
ghidra = "11.1"
jewel = "0.17.3"
jmhGradlePlugin = "0.7.2"
koin-bom = "3.6.0-wasm-alpha2"
koinAnnotations = "1.3.1"
kotlin = "1.9.23"
kotlinpoet = "1.16.0"
kotlinxCoroutines = "1.8.0"
kotlinxSerialization = "1.6.3"
kover = "0.7.6"
ksp = "1.9.23-1.0.20"
lucene = "9.10.0"

[libraries]
classgraph = { module = "io.github.classgraph:classgraph", version.ref = "classgraph" }
fastutil = { module = "it.unimi.dsi:fastutil", version.ref = "fastutil" }
filePicker = { module = "com.darkrockstudios:mpfilepicker", version = "3.1.0" }

intellij-icons = { module = "com.jetbrains.intellij.platform:icons", version.ref = "intellij" }
intellij-util-text-matching = { module = "com.jetbrains.intellij.platform:util-text-matching", version.ref = "intellij" }
intellij-util-base = { module = "com.jetbrains.intellij.platform:util-base", version.ref = "intellij" }

jetbrains-compose-splitpane = { module = "org.jetbrains.compose.components:components-splitpane-desktop", version.ref = "composeDesktop" }

lucene-core = { module = "org.apache.lucene:lucene-core", version.ref = "lucene" }

koin-bom = { module = "io.insert-koin:koin-bom", version.ref = "koin-bom" }
koin-compose = { module = "io.insert-koin:koin-compose" }
koin-core = { module = "io.insert-koin:koin-core" }
koin-coroutines = { module = "io.insert-koin:koin-core-coroutines" }
koin-test-junit5 = { module = "io.insert-koin:koin-test-junit5" }
koin-annotations-bom = { module = "io.insert-koin:koin-annotations-bom", version.ref = "koinAnnotations" }
koin-annotations = { module = "io.insert-koin:koin-annotations", version.ref = "koinAnnotations" }
koin-ksp-compiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koinAnnotations" }

kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines"}
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }

kotlinpoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinpoet" }
kotlinpoet-ksp = { module = "com.squareup:kotlinpoet-ksp", version.ref = "kotlinpoet" }


ksp = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }

jewel-standalone = { module = "org.jetbrains.jewel:jewel-int-ui-standalone-241", version.ref = "jewel" }
jewel-decorated-window = { module = "org.jetbrains.jewel:jewel-int-ui-decorated-window-241", version.ref = "jewel" }

ghidra-platform = { module = "ghidra:ghidra", version.ref = "ghidra" }
ghidra-base = { module = "ghidra:Base", version.ref = "ghidra" }
ghidra-project = { module = "ghidra:Project", version.ref = "ghidra" }
ghidra-software-modeling = { module = "ghidra:SoftwareModeling", version.ref = "ghidra" }

# Plugin libraries for build-logic's convention plugins to use to resolve the types/tasks coming from these plugins
detekt-gradlePlugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
dokka-gradlePlugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
idea-gradlePlugin = { module = "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext", version.ref = "ideaGradlePlugin" }
jmh-gradlePlugin = { module = "me.champeau.jmh:jmh-gradle-plugin", version.ref = "jmhGradlePlugin" }
kotlin-gradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-serialization-gradlePlugin = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
kover-gradlePlugin = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }

[bundles]
ghidra-all-modules = ["ghidra-base", "ghidra-project", "ghidra-software-modeling"]

[plugins]
composeDesktop = { id = "org.jetbrains.compose", version.ref = "composeDesktop" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
